# Robust multi-stage build for Alpine Linux compatibility
FROM python:3.11-slim AS builder

# Install build dependencies for Debian/Ubuntu
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    git \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Final stage with Alpine for smaller size
FROM python:3.11-alpine

# Install runtime dependencies
RUN apk add --no-cache \
    libstdc++ \
    && rm -rf /var/cache/apk/* \
    && adduser -D -s /bin/sh appuser

WORKDIR /app

# Copy Python packages from builder stage
COPY --from=builder /root/.local /home/appuser/.local

# Set PATH for user packages
ENV PATH=/home/appuser/.local/bin:$PATH

# Copy only the absolutely necessary files
COPY --chown=appuser:appuser app.py .
COPY --chown=appuser:appuser icpc_utils.py .
COPY --chown=appuser:appuser rag_infer.py .
COPY --chown=appuser:appuser rag_infer_stream.py .
COPY --chown=appuser:appuser icpc2.faiss .
COPY --chown=appuser:appuser icpc2_meta.json .
COPY --chown=appuser:appuser prompt_template.txt .
COPY --chown=appuser:appuser templates/ templates/

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5000

# Run the application
CMD ["python", "app.py"]
